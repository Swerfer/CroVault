<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <!--
    A second <system.webServer> block can define additional configuration
    (outside the <location> block). Typically includes HTTP error handling,
    URL rewriting, compression, and more.
  -->
  <system.webServer>
    <!--
      <httpErrors> - Tells IIS how to handle certain HTTP error status codes.
      Here, we're customizing 403, 404, and 500 errors to execute certain pages
      (403.html, 404.html, 500.html). The Remove directives ensure we don't
      conflict with any inherited definitions for those status codes.
      'existingResponse="Replace"' means IIS will override any response coming
      from the ASP.NET Core app with this custom error page if the status code matches.
    -->
    <httpErrors errorMode="Custom" existingResponse="Replace">
      <remove statusCode="403" subStatusCode="-1" />
      <error statusCode="403" path="/403.html" responseMode="ExecuteURL" />

      <remove statusCode="404" subStatusCode="-1" />
      <error statusCode="404" path="/404.html" responseMode="ExecuteURL" />

      <remove statusCode="500" subStatusCode="-1" />
      <error statusCode="500" path="/500.html" responseMode="ExecuteURL" />
    </httpErrors>

    <!--
      The <rewrite> section contains URL rewrite rules and outbound rules.
      - Common uses include redirecting traffic to HTTPS, removing "www", or
        rewriting extensionless URLs to .html.
    -->
    <rewrite>
      <rules>
    	<!-- Redirect index.html and index to root -->
    	<rule name="Redirect index.html to root" stopProcessing="true">
      	  <match url="^index(\.html)?$" />
      	  <action type="Redirect" url="/" redirectType="Permanent" />
    	</rule>

	<rule name="Redirect .html to non-.html" stopProcessing="true">
  	  <match url="^(.*)\.html$" />
  	  <conditions>
    	    <!-- Prevent redirecting the 403, 404 and 500 error page -->
    	    <add input="{REQUEST_URI}" pattern="^/403\.html$" negate="true" />
	    <add input="{REQUEST_URI}" pattern="^/404\.html$" negate="true" />
	    <add input="{REQUEST_URI}" pattern="^/500\.html$" negate="true" />
	    <add input="{REQUEST_URI}" pattern="^/license\.html$" negate="true" />
  	  </conditions>
  	  <action type="Redirect" url="https://{HTTP_HOST}/{R:1}" redirectType="Permanent" />
	</rule>

        <!--
          This rule forces:
          1) If the request host starts with "www." => remove "www."
          2) If HTTPS is off => redirect to https
          Combined: "Redirect to Non-WWW HTTPS" in one step with a permanent redirect (301).
        -->
        <rule name="Redirect to Non-WWW HTTPS" stopProcessing="true">
          <match url="(.*)" />
          <conditions logicalGrouping="MatchAny">
            <!-- Match if the host is www.something -->
            <add input="{HTTP_HOST}" pattern="^www\.(.+)$" />
            <!-- Or if HTTPS is off -->
            <add input="{HTTPS}" pattern="off" ignoreCase="true" />
          </conditions>
          <action type="Redirect" url="https://{C:1}/{R:1}" redirectType="Permanent" />
        </rule>

        <!--
          Rewrite HTML Extension:
          - Takes extensionless URLs (like /about) and rewrites them to /about.html
            IF the resource is not an existing file or directory, does not already
            end in .html, and is not in the /api or /eventHub paths.
          - This allows nicer extensionless URLs while physically storing .html files.
        -->
	<rule name="Rewrite HTML Extension" stopProcessing="true">
  	  <match url="^(.*)$" />
  	  <conditions>
    	    <!-- Only rewrite if the requested resource does not exist as a file or directory -->
            <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
    	    <add input="{REQUEST_FILENAME}" matchType="IsDirectory" negate="true" />
    	    <!-- Skip if the URL already ends with .html -->
    	    <add input="{REQUEST_URI}" pattern="\.html$" negate="true" />
	    <!-- Exclude LICENSE file -->
	    <add input="{REQUEST_URI}" pattern="^/LICENSE$" negate="true" />
    	    <!-- Exclude API and SignalR endpoints -->
    	    <add input="{REQUEST_URI}" pattern="^/(eventHub|api)" negate="true" />
    	    <!-- Exclude common static file extensions -->
    	    <add input="{REQUEST_URI}" pattern="\.(css|js|png|jpg|xml|gif|ico|webp|svg|txt|json)$" negate="true" />
  	  </conditions>
  	  <!-- Ensure query strings are appended to the rewritten URL -->
          <action type="Rewrite" url="{R:1}.html" appendQueryString="true" />
	</rule>
      </rules>

      <!--
        Outbound rewrite rules apply to the response headers. Here, we remove
        the "Server" header so the server doesn't disclose "Microsoft-IIS/10.0" or similar.
      -->
      <outboundRules>
        <rule name="Remove Server Header">
          <match serverVariable="RESPONSE_Server" pattern=".+" />
          <action type="Rewrite" value="" />
        </rule>
      </outboundRules>
    </rewrite>

    <!--
      <clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="1.00:00:00" />
      Instructs IIS to send a "Cache-Control: max-age" header for static content,
      telling browsers and intermediate caches to store these files for up to
      1 days (1.00:00:00 means 1 days). This helps improve performance by
      reducing repeated requests for unchanged static resources.
    -->
    <staticContent>
      <clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="1.00:00:00" />
      <remove fileExtension=".png" />
      <remove fileExtension=".jpg" />
      <remove fileExtension=".jpeg" />
      <remove fileExtension=".gif" />
      <remove fileExtension=".svg" />
      <remove fileExtension=".ico" />
      <remove fileExtension=".webp" />
      <remove fileExtension=".js" />

      <mimeMap fileExtension=".png" mimeType="image/png" />
      <mimeMap fileExtension=".jpg" mimeType="image/jpeg" />
      <mimeMap fileExtension=".jpeg" mimeType="image/jpeg" />
      <mimeMap fileExtension=".gif" mimeType="image/gif" />
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
      <mimeMap fileExtension=".ico" mimeType="image/x-icon" />
      <mimeMap fileExtension=".webp" mimeType="image/webp" />
      <mimeMap fileExtension=".js" mimeType="text/javascript" />
    </staticContent>

    <!--
      <defaultDocument>:
      Specifies the default file served when a user requests a directory.
      e.g. https://example.com/ -> will serve index.html by default.
    -->
    <defaultDocument>
      <files>
                <remove value="default.aspx" />
                <remove value="iisstart.htm" />
                <remove value="index.html" />
                <remove value="index.htm" />
                <remove value="Default.asp" />
                <remove value="Default.htm" />
        	<add value="index.html" />
      </files>
    </defaultDocument>

    <!--
      <httpProtocol> -> <customHeaders>:
      Removes or adds custom HTTP headers. Here we remove "X-Powered-By"
      to make the server less verbose about its technology stack.
      Strict-Transport-Security (often abbreviated as HSTS) is an HTTP response header 
      that tells browsers to only connect to your site using HTTPS for a specified period. 
      In other words, once a user has visited your site over HTTPS, their browser will 
      never attempt to connect via HTTP (insecure) during that time windowâ€”protecting 
      against protocol downgrades and certain man-in-the-middle attacks.
    -->
    <httpProtocol>
      <customHeaders>
        <remove name="X-Powered-By" />
        <remove name="Server" />
        <remove name="X-AspNet-Version" />
        <remove name="X-AspNetMvc-Version" />
	<add name="Strict-Transport-Security" value="max-age=31536000; includeSubDomains; preload" />
      </customHeaders>
    </httpProtocol>

  </system.webServer>

  <!--
    <system.web> in modern ASP.NET Core is not heavily used. However, one
    useful setting is <httpRuntime enableVersionHeader="false" /> which hides
    the "X-AspNet-Version" header, further reducing server fingerprinting.
  -->
  <system.web>
    <httpRuntime enableVersionHeader="false" />
  </system.web>
</configuration>
